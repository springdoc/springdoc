plugins {
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'org.jetbrains.kotlin.jvm' version '1.3.72' apply false
	id 'org.sonarqube' version '2.8'
	id 'net.researchgate.release' version '2.8.1'
	id 'java'
	id 'signing'
}

ext {
	springBootVersion = '2.3.0.RELEASE'
	swaggerApiVersion = '2.1.2'
	swaggerUiVersion = '3.27.0'
}

subprojects {
	apply plugin: 'java-library'
	apply plugin: 'maven-publish'
	apply plugin: 'io.spring.dependency-management'

	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
	compileJava.options.encoding = "UTF-8"
	compileTestJava.options.encoding = "UTF-8"

	configurations {
		testImplementation.extendsFrom compileOnly
	}

	repositories {
		mavenLocal()
		mavenCentral()
	}

	dependencies {
		testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
	}

	dependencyManagement {
		imports { mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}") }
		dependencies {
			dependency "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}"
			dependency "io.swagger.core.v3:swagger-models:${swaggerApiVersion}"
			dependency "io.swagger.core.v3:swagger-annotations:${swaggerApiVersion}"
			dependency("io.swagger.core.v3:swagger-integration:${swaggerApiVersion}") {
				exclude "io.github.classgraph:classgraph"
			}
			dependency "org.webjars:swagger-ui:${swaggerUiVersion}"
			dependency('org.webjars:webjars-locator-core:0.45') {
				exclude "io.github.classgraph:classgraph"
			}
			dependency 'io.github.classgraph:classgraph:4.8.69'
			dependency 'org.springframework.security:spring-security-core:5.3.2.RELEASE'
			dependency 'org.springframework.security.oauth:spring-security-oauth2:2.3.8.RELEASE'
			dependency 'javax.xml:jaxb-impl:2.1'
			dependency 'jakarta.servlet:jakarta.servlet-api:4.0.3'
			dependency 'org.projectlombok:lombok:1.18.12'
			dependency 'org.codehaus.groovy:groovy:2.5.11'
		}
	}

	test {
		useJUnitPlatform()
	}

	task sourcesJar(type: Jar) {
		from sourceSets.main.allJava
		archiveClassifier = "sources"
	}

	task javadocJar(type: Jar) {
		from sourceSets.main.allJava
		archiveClassifier = "javadoc"
	}

	publishing {
		publications {
			mavenJava(MavenPublication) {
				from components.java
				artifact sourcesJar
				artifact javadocJar

				versionMapping {
					usage('java-api') {
						fromResolutionOf('runtimeClasspath')
					}
					usage('java-runtime') {
						fromResolutionResult()
					}
				}
				pom {
					name = 'Spring OpenAPI 3.0 documentation generator'
					description = 'Spring OpenAPI 3.0 documentation generator'
					url = 'https://springdoc.org/'
					licenses {
						license {
							name = 'The Apache License, Version 2.0'
							url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
						}
					}
					developers {
						developer {
							id = 'bnasslahsen'
							name = 'Badr NASS'
							email = 'support@springdoc.org'
						}
					}
					scm {
						connection = 'scm:git:git@github.com:springdoc/springdoc-openapi.git'
						developerConnection = 'scm:git:ssh://github.com:springdoc/springdoc-openapi.git'
						url = 'https://springdoc.org/'
					}
				}
			}
		}
		repositories {
			maven {
				if (project.version.endsWith('-SNAPSHOT')) {
					url "https://oss.sonatype.org/content/repositories/snapshots"
				} else {
					url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
				}
				credentials {
					username System.getenv("OSSRH_USER")
					password System.getenv("OSSRH_PASS")
				}
			}
		}
	}

	if (project.hasProperty("signing.keyId")) {
		apply plugin: 'signing'
		signing {
			sign publishing.publications.mavenJava
		}
	}

}

sonarqube {
	properties {
		property("sonar.projectKey", "springdoc_springdoc-openapi")
	}
}


release {
	tagTemplate = 'v$version'
}

afterReleaseBuild.dependsOn subprojects.publish
